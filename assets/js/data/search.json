[
  
  {
    "title": "Java 기본형 vs 참조형 요약",
    "url": "/posts/java-primitiveType_referenceType/",
    "categories": "Java, Study",
    "tags": "primitive, reference, datatype",
    "date": "2025-08-20 15:30:00 +0900",
    "content": "✅ Java 데이터 타입 분류  자바의 데이터 타입은 크게 두 가지로 나뉜다:     기본형 (Primitive Type)   참조형 (Reference Type)     🧱 기본형 (Primitive Type)     데이터를 직접 값으로 저장한다.   총 8가지 타입이 존재한다.   메모리(stack)에 실제 값을 저장함.                  타입       크기       예시 값                       byte       1B       100                 short       2B       32000                 int       4B       123                 long       8B       123456789L                 float       4B       3.14f                 double       8B       3.14159                 char       2B       ‘A’                 boolean       1B       true / false           int a = 10; char ch = 'A'; boolean isAdult = true;          위처럼 변수에 사용할 값을 직접 넣을 수 있는 데이터 타입을 기본형이라 한다.      🔗 참조형 (Reference Type)     객체(Object)의 주소값을 저장한다.   클래스, 배열, 인터페이스 등 대부분의 사용자 정의 데이터.   heap에 객체 데이터를 만들고, 그 주소를 stack에 저장.   String name = \"Alice\";           // String 객체의 주소 저장 int[] scores = {90, 80, 100};    // 배열도 참조형 Student student = new Student(); // 클래스도 참조형          위처럼 데이터에 접근하기 위한 참조(주소)를 저장하는 데이터 타입을 참조형이라고 한다. 참조형은 객체 또는 배열에 사용한다.      🧠 주요 차이                 비교 항목       기본형 (Primitive)       참조형 (Reference)                       저장 내용       실제 값 (value)       객체 주소 (reference)                 메모리 위치       Stack       객체는 Heap, 참조는 Stack                 null 저장       ❌ 불가능       ✅ 가능 (null로 초기화 가능)                 예시       int, double, boolean       String, 배열, 사용자 클래스             기본형 vs 참조형 - 기본    기본형은 숫자 10, 20과 같이 실제 사용하는 값을 변수에 담을 수 있다.(해당값 바로 사용할수 있음)   참조형은 실제 사용하는 값을 변수에 담는 것이 아님, 이름 그대로 실제 객체의 위치(참조,주소)를 저장한다. 참조형에는 객체와 배열이 있음            객체는 .(dot)을 통해서 메모리 상에 생성된 객체를 찾아가 사용       배열은 []를 통해서 메모리 상에 생성된 객체를 찾아가 사용           기본형 vs 참조형 - 계산    기본형은 들어있는 값을 그대로 계산에 사용            ex) 더하고 빼고, 사용하고 등(숫자 같은 것들은 바로 계산)           참조형은 들어있는 참조값을 그대로 사용할 수 없다. 주소지만 가지고 할 수 있는게 없음, 주소지에 가야 사용가능            ex) 더하고 빼고 사용하고 못함, 참조값만 가지고는 계산불가.            📌 예제 비교  int x = 10; int y = x;       // 값 복사  x = 20; System.out.println(y);  // 10 (영향 X)   int[] arr1 = {1, 2, 3}; int[] arr2 = arr1;   // 주소 복사  arr1[0] = 99; System.out.println(arr2[0]); // 99 (같은 객체를 가리킴)      👉 기본형은 값을 복사, 참조형은 주소를 공유한다는 점이 핵심!     🧠 기본형 vs 참조형: 메서드 호출  자바는 항상 변수의 값을 복사해서 대입한다. 이 원칙은 메서드 호출 시에도 동일하게 적용된다.    ✅ 기본형: 값만 복사  public class MethodChange1 {   public static void main(String[] args) {     int a = 10;     System.out.println(\"메서드 호출 전: a = \" + a);     changePrimitive(a);     System.out.println(\"메서드 호출 후: a = \" + a);   }    static void changePrimitive(int x) {     x = 20;   } }   실행 결과:  메서드 호출 전: a = 10 메서드 호출 후: a = 10   설명    a의 값이 x에 복사됨 → 두 변수는 별개   x = 20은 a에 영향을 주지 않음     ✅ 참조형: 참조값이 복사됨  public class MethodChange2 {   public static void main(String[] args) {     Data dataA = new Data();     dataA.value = 10;     System.out.println(\"메서드 호출 전: dataA.value = \" + dataA.value);     changeReference(dataA);     System.out.println(\"메서드 호출 후: dataA.value = \" + dataA.value);   }    static void changeReference(Data dataX) {     dataX.value = 20;   } }   실행 결과:  메서드 호출 전: dataA.value = 10 메서드 호출 후: dataA.value = 20   설명    dataA의 참조값이 dataX에 복사됨 → 두 변수는 같은 객체를 가리킴   dataX.value = 20은 dataA.value에도 영향     ✅ 정리                 구분       전달 방식       메서드 내부 변경 시 호출자에 영향                       기본형       값 복사       ❌ 없음                 참조형       참조값 복사       ✅ 있음              자바의 매개변수 전달은 항상 값에 의한 전달(Call by Value).   기본형은 실제 값을, 참조형은 주소(참조값)를 복사.     ✅ 핵심 요약     변수에 대입 = 값 복사   메서드 호출 = 매개변수도 값 복사   참조형의 경우 복사된 값이 참조값이라 객체 내용은 변경 가능     🧪 null 주의  Student s = null; System.out.println(s.name); // ❌ NullPointerException     ✅ 요약     기본형: 숫자, 문자, 논리 등 값 자체를 다룸   참조형: 객체나 배열 등 실제 데이터 위치를 가리킴   참조형은 null, 공유, heap 등을 항상 염두에 둘 것    "
  },
  
  {
    "title": "Java 클래스 요약",
    "url": "/posts/java-class-summary/",
    "categories": "Java, Study",
    "tags": "class, OOP, beginner",
    "date": "2025-08-12 15:00:00 +0900",
    "content": "📌 클래스와 데이터 문제상황    학생 정보를 다룰 때 이름, 나이, 성적 등 여러 데이터를 저장해야 함   변수로 처리하면: 학생 1명당 3개의 변수 필요 → 학생 늘어나면 코드 폭발   배열로 처리하면: 데이터가 나뉘어 저장됨 → 인덱스 관리 어려움, 실수 위험      💡 클래스를 사용하면 관련 데이터를 묶어서 구조화할 수 있어 유지보수에 유리합니다.   해결책: 클래스  public class Student {   String name;   int age;   int grade; }  하나의 객체에 관련 데이터를 묶어서 표현 Student student1 = new Student(); // Student 클래스 기반 객체 생성 student1.name = \"학생\";            // 객체의 필드에 값 할당 student1.age = 15; student1.grade = 90;     객체 생성: new 클래스명()   객체 참조: 객체변수.멤버변수   ✅ 자바 클래스 핵심 요약    ✅ 클래스 = 사용자 정의 타입     int, String처럼 직접 만든 데이터 타입이 될 수 있음   클래스를 사용하면 현실 세계의 개념(학생, 자동차 등)을 프로그래밍 세계에 맞게 표현할 수 있음   클래스는 설계도, 객체는 그 설계도로 만들어진 실제 실체 (= 인스턴스)     ✅ 클래스 도입 효과                 방법       단점 또는 문제점                       변수       학생 늘어나면 변수 폭발                 배열       관련 데이터가 배열로 나뉘어 관리 어려움                 클래스       ✅ 관련 데이터를 묶어 구조화, 유지보수 용이             ✅ 용어 정리                 클래스(Class)       객체를 만들기 위한 설계도, 사용자 정의 데이터 타입                       객체(Object) / 인스턴스(Instance)       클래스를 바탕으로 만들어진 메모리 상의 실제 실체 (동일한 의미로 사용됨)                       필드(Field)       클래스 내부에 선언된 변수 (= 멤버 변수). 객체의 상태(데이터)를 저장함           배열과 클래스    Student[] students = new Student[2]; 형태로 배열 선언   객체 배열을 통해 여러 학생 정보를 관리할 수 있음   Student[] students = {student1, student2}; for (Student s : students) {     System.out.println(\"이름:\" + s.name + \" 나이:\" + s.age + \" 성적:\" + s.grade); }  "
  }
  
]

