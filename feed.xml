

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>myNote</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-09-04T15:27:26+09:00</updated>
  <author>
    <name>yun</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 yun </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>접근 제어자</title>
    <link href="/posts/java-access_modifier/" rel="alternate" type="text/html" title="접근 제어자" />
    <published>2025-09-03T20:32:00+09:00</published>
  
    <updated>2025-09-03T20:32:00+09:00</updated>
  
    <id>/posts/java-access_modifier/</id>
    <content type="text/html" src="/posts/java-access_modifier/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ 접근 제어자 이해  접근제어자란? - 해당 클래스 외부에서 특정 필드나 메서드에 접근하는 것을 허용하거나 제한할수있는것.  에어컨 예제)    에어컨은 최고온도나 최저온도를 넘을수 없다.(넘어가면 에어컨이 고장난다.)   아래는 에어컨의 객체다.     package access;  public class AirConditioner {     int temperature;      // 생성자     public AirConditioner(int temperature) {         this.temperature = temperature;     }      // 온도 올리기     public void increaseTemp() {         if (temperature &amp;gt;= 30) ...</summary>

  </entry>

  
  <entry>
    <title>생성자(Constructor)</title>
    <link href="/posts/java-Construct/" rel="alternate" type="text/html" title="생성자(Constructor)" />
    <published>2025-08-28T18:30:00+09:00</published>
  
    <updated>2025-08-28T18:30:00+09:00</updated>
  
    <id>/posts/java-Construct/</id>
    <content type="text/html" src="/posts/java-Construct/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ 생성자  객체를 생성하는 시점에 어떠한 작업을 하려면 생성자(Constructor)를 이용 해야 된다.  1. 필드만 있는 클래스 (CarInit) package construct;  public class CarInit {     String model;     String color;     int maxSpeed; }  2. 값을 일일이 직접 넣는 방식(CarInitMain1) package construct;  public class CarInitMain1 {     public static void main(String[] args) {         CarInit car1 = new CarInit();         car1.model = "Avante";         car1.colo...</summary>

  </entry>

  
  <entry>
    <title>객체 지향 프로그래밍</title>
    <link href="/posts/java-Object-Oriented-Programming/" rel="alternate" type="text/html" title="객체 지향 프로그래밍" />
    <published>2025-08-28T17:44:00+09:00</published>
  
    <updated>2025-08-28T17:44:00+09:00</updated>
  
    <id>/posts/java-Object-Oriented-Programming/</id>
    <content type="text/html" src="/posts/java-Object-Oriented-Programming/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ 절차 지향 프로그래밍 vs 객체지향 프로그래밍     절차 지향 프로그래밍            절차 지향 프로그래밍은 이름 그대로 절차를 지향, 실행순서를 중요하게 생각하는 방식       절차 지향 프로그래밍은 프로그램의 흐름을 순차적으로 따르며 처리, “어떻게”를 중심으로 프로그래밍 한다.           객체 지향 프로그래밍            객체 지향 프로그래밍은 이름 그대로 객체를 지향, 객체를 중요하게 생각하는 방식       객체 지향 프로그래밍은 실제 세계의 사물이나 사건을 객체로 보고, 객체들간의 상호작용을 중심으로 프로그래밍 하는 방식. “무엇을” 중심으로 프로그래밍           둘의 중요한차이            절차지향은 데이터와 해당 데이터에 대한 ㅊ리 방식이 분리 ...</summary>

  </entry>

  
  <entry>
    <title>Java 기본형 vs 참조형 요약</title>
    <link href="/posts/java-primitiveType_referenceType/" rel="alternate" type="text/html" title="Java 기본형 vs 참조형 요약" />
    <published>2025-08-20T15:30:00+09:00</published>
  
    <updated>2025-08-28T17:49:14+09:00</updated>
  
    <id>/posts/java-primitiveType_referenceType/</id>
    <content type="text/html" src="/posts/java-primitiveType_referenceType/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ Java 데이터 타입 분류  자바의 데이터 타입은 크게 두 가지로 나뉜다:     기본형 (Primitive Type)   참조형 (Reference Type)     🧱 기본형 (Primitive Type)     데이터를 직접 값으로 저장한다.   총 8가지 타입이 존재한다.   메모리(stack)에 실제 값을 저장함.                  타입       크기       예시 값                       byte       1B       100                 short       2B       32000                 int       4B       123                 long       8B       123456789...</summary>

  </entry>

  
  <entry>
    <title>Java 클래스 요약</title>
    <link href="/posts/java-class-summary/" rel="alternate" type="text/html" title="Java 클래스 요약" />
    <published>2025-08-12T15:00:00+09:00</published>
  
    <updated>2025-08-28T17:49:14+09:00</updated>
  
    <id>/posts/java-class-summary/</id>
    <content type="text/html" src="/posts/java-class-summary/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>📌 클래스와 데이터 문제상황    학생 정보를 다룰 때 이름, 나이, 성적 등 여러 데이터를 저장해야 함   변수로 처리하면: 학생 1명당 3개의 변수 필요 → 학생 늘어나면 코드 폭발   배열로 처리하면: 데이터가 나뉘어 저장됨 → 인덱스 관리 어려움, 실수 위험      💡 클래스를 사용하면 관련 데이터를 묶어서 구조화할 수 있어 유지보수에 유리합니다.   해결책: 클래스  public class Student {   String name;   int age;   int grade; }  하나의 객체에 관련 데이터를 묶어서 표현 Student student1 = new Student(); // Student 클래스 기반 객체 생성 student1.name = "학생";            // 객체...</summary>

  </entry>

</feed>


