

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>myNote</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-08-20T15:41:55+09:00</updated>
  <author>
    <name>yun</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 yun </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Java 기본형 vs 참조형 요약</title>
    <link href="/posts/java-primitiveType_referenceType/" rel="alternate" type="text/html" title="Java 기본형 vs 참조형 요약" />
    <published>2025-08-20T15:30:00+09:00</published>
  
    <updated>2025-08-20T15:30:00+09:00</updated>
  
    <id>/posts/java-primitiveType_referenceType/</id>
    <content type="text/html" src="/posts/java-primitiveType_referenceType/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ Java 데이터 타입 분류  자바의 데이터 타입은 크게 두 가지로 나뉜다:     기본형 (Primitive Type)   참조형 (Reference Type)     🧱 기본형 (Primitive Type)     데이터를 직접 값으로 저장한다.   총 8가지 타입이 존재한다.   메모리(stack)에 실제 값을 저장함.                  타입       크기       예시 값                       byte       1B       100                 short       2B       32000                 int       4B       123                 long       8B       123456789...</summary>

  </entry>

  
  <entry>
    <title>Java 클래스 요약</title>
    <link href="/posts/java-class-summary/" rel="alternate" type="text/html" title="Java 클래스 요약" />
    <published>2025-08-12T15:00:00+09:00</published>
  
    <updated>2025-08-13T16:54:35+09:00</updated>
  
    <id>/posts/java-class-summary/</id>
    <content type="text/html" src="/posts/java-class-summary/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>📌 클래스와 데이터 문제상황    학생 정보를 다룰 때 이름, 나이, 성적 등 여러 데이터를 저장해야 함   변수로 처리하면: 학생 1명당 3개의 변수 필요 → 학생 늘어나면 코드 폭발   배열로 처리하면: 데이터가 나뉘어 저장됨 → 인덱스 관리 어려움, 실수 위험      💡 클래스를 사용하면 관련 데이터를 묶어서 구조화할 수 있어 유지보수에 유리합니다.   해결책: 클래스  public class Student {   String name;   int age;   int grade; }  하나의 객체에 관련 데이터를 묶어서 표현 Student student1 = new Student(); // Student 클래스 기반 객체 생성 student1.name = "학생";            // 객체...</summary>

  </entry>

</feed>


