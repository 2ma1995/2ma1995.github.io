

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>myNote</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-09-10T16:42:48+09:00</updated>
  <author>
    <name>yun</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 yun </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Spring 웹 계층 구조</title>
    <link href="/posts/spring-web%EA%B3%84%EC%B8%B5/" rel="alternate" type="text/html" title="Spring 웹 계층 구조" />
    <published>2025-09-10T16:36:00+09:00</published>
  
    <updated>2025-09-10T16:36:00+09:00</updated>
  
    <id>/posts/spring-web%EA%B3%84%EC%B8%B5/</id>
    <content type="text/html" src="/posts/spring-web%EA%B3%84%EC%B8%B5/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Spring" />
    
    <category term="Study" />
    
  

  <summary>✅ web 3-Tier Architecture    spring 웹 계층이란? - 스프링의 웹 계층은 크게 3 개로 나눌수 있다. Presentation Layer, Business Layer, Data Access Layer    프레젠테이션 계층 (Controller)    브라우저상의 웹 클라이언트의 요청 및 응답 처리   서비스 계층, 데이터 엑세스 계층에서 발생하는 Exception(예외)을 처리   @Controller 어노테이션 사용으로 작성된 Controller클래스가 이 계층에 속한다.   서비스 계층 (Service)    애플리케이션 비즈니스 로직 처리와 비즈니스와 관련된 도메인 모델의 적합성 검증   트랜잭션 관리   프레젠테이션 계층과 데이터 엑세스 계층 사이를 연결하는 역할, ...</summary>

  </entry>

  
  <entry>
    <title>Dispatcher-Servlet</title>
    <link href="/posts/spring-dispatcherServlet/" rel="alternate" type="text/html" title="Dispatcher-Servlet" />
    <published>2025-09-09T21:09:00+09:00</published>
  
    <updated>2025-09-09T21:26:10+09:00</updated>
  
    <id>/posts/spring-dispatcherServlet/</id>
    <content type="text/html" src="/posts/spring-dispatcherServlet/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Spring" />
    
    <category term="Study" />
    
  

  <summary>✅ Dispatcher Servlet  Dispatcher-Servlet이란? - HTTP프로토콜로 들어오는 모든 요청을 가장 먼저 받아, 적합한 컨트롤러에 위임해주는 프론트 컨트롤러(Front Controller)  상세설명)    클라이언트로부터 요청(Http프로토콜)이 오면 Tomcat과 같은 서블릿 컨테이너가 요청을 받음.   이 모든 요청을 프론트 컨트롤러인 디스패처 서블릿(Dispatcher-Servlet)이 가장 먼저 받음.   요청을 받은 디스패처 서블릿이 공통적인 작업을 먼저 처리후, 해당 요철을 처리하는 컨트롤러를 찾아 작업을 위임.   프론트 컨트롤러란? 서블릿 컨테이너의 제일 앞에서 서버로 들어오는 클라이언트의 모든 요청을 받아서 처리해주는 컨트롤러(MVC)구조에서 함께 사용되는 ...</summary>

  </entry>

  
  <entry>
    <title>접근 제어자</title>
    <link href="/posts/java-access_modifier/" rel="alternate" type="text/html" title="접근 제어자" />
    <published>2025-09-03T20:32:00+09:00</published>
  
    <updated>2025-09-04T15:44:34+09:00</updated>
  
    <id>/posts/java-access_modifier/</id>
    <content type="text/html" src="/posts/java-access_modifier/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ 접근 제어자 이해  접근제어자란? - 해당 클래스 외부에서 특정 필드나 메서드에 접근하는 것을 허용하거나 제한할수있는것.  에어컨 예제)    에어컨은 최고온도나 최저온도를 넘을수 없다.(넘어가면 에어컨이 고장난다.)   아래는 에어컨의 객체다.     package access;  public class AirConditioner {     int temperature;      // 생성자     public AirConditioner(int temperature) {         this.temperature = temperature;     }      // 온도 올리기     public void increaseTemp() {         if (temperature &amp;gt;= 30) ...</summary>

  </entry>

  
  <entry>
    <title>생성자(Constructor)</title>
    <link href="/posts/java-Construct/" rel="alternate" type="text/html" title="생성자(Constructor)" />
    <published>2025-08-28T18:30:00+09:00</published>
  
    <updated>2025-09-04T15:50:35+09:00</updated>
  
    <id>/posts/java-Construct/</id>
    <content type="text/html" src="/posts/java-Construct/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ 생성자  객체를 생성하는 시점에 어떠한 작업을 하려면 생성자(Constructor)를 이용 해야 된다.  1. 필드만 있는 클래스 (CarInit) package construct;  public class CarInit {     String model;     String color;     int maxSpeed; }  2. 값을 일일이 직접 넣는 방식 (CarInitMain1) package construct;  public class CarInitMain1 {     public static void main(String[] args) {         CarInit car1 = new CarInit();         car1.model = "Avante";         car1.col...</summary>

  </entry>

  
  <entry>
    <title>객체 지향 프로그래밍</title>
    <link href="/posts/java-Object-Oriented-Programming/" rel="alternate" type="text/html" title="객체 지향 프로그래밍" />
    <published>2025-08-28T17:44:00+09:00</published>
  
    <updated>2025-08-28T17:44:00+09:00</updated>
  
    <id>/posts/java-Object-Oriented-Programming/</id>
    <content type="text/html" src="/posts/java-Object-Oriented-Programming/" />
    <author>
      <name>yun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  <summary>✅ 절차 지향 프로그래밍 vs 객체지향 프로그래밍     절차 지향 프로그래밍            절차 지향 프로그래밍은 이름 그대로 절차를 지향, 실행순서를 중요하게 생각하는 방식       절차 지향 프로그래밍은 프로그램의 흐름을 순차적으로 따르며 처리, “어떻게”를 중심으로 프로그래밍 한다.           객체 지향 프로그래밍            객체 지향 프로그래밍은 이름 그대로 객체를 지향, 객체를 중요하게 생각하는 방식       객체 지향 프로그래밍은 실제 세계의 사물이나 사건을 객체로 보고, 객체들간의 상호작용을 중심으로 프로그래밍 하는 방식. “무엇을” 중심으로 프로그래밍           둘의 중요한차이            절차지향은 데이터와 해당 데이터에 대한 ㅊ리 방식이 분리 ...</summary>

  </entry>

</feed>


